<?php
/**
 * Created by PhpStorm.
 * User: zdenek
 * Date: 11/15/18
 * Time: 11:12 AM
 */

namespace CMS\Backend\Presenters;


use CMS\Forms\FormFactory;
use CMS\Model\Table;
use CMS\Model\TableColumn;
use Nette;
use Nette\Application;
use Nette\Application\UI\ITemplateFactory;
use Nette\Application\UI\Presenter;
use Nette\Http;
use Tracy\Debugger;

abstract class BasePresenter extends Presenter
{
    /** @persistent */
    public $lang;

    /** @var \CMS\Helpers\WebDir */
    private $_webDir;

    /** @var \App\Model\Translator */
    private $_translator;

    /** @var \App\Model\Language */
    private $_language;

    /** @var \App\Model\Base */
    protected $model;

    /** @var \CMS\Forms\FormFactory */
    protected $formFactory;

    private const CMS_PATH = 'vendor/lefnerz/cms/src/cms/';
    private const CMS_COMPONENT_FORM_SUFFIX = 'Form';

    protected $submenu = [];
    protected $currentId;
    protected $currentSubmenu;

    public function injectServices(\CMS\Helpers\WebDir $webDir, \App\Model\Translator $translator, \App\Model\Language $language, FormFactory $formFactory)
    {
        $this->_webDir = $webDir;
        $this->_translator = $translator;
        $this->_language = $language;
        $this->formFactory = $formFactory;
    }

    public function actionDefault()
    {
        foreach ($this->formatFiles('default.latte') as $formatFile) {
            if (is_file($formatFile)) {
                $this->template->setFile($formatFile);
                break;
            }
        }
    }

    public function actionDetail($id, $id2 = null)
    {
        $this->currentId = $id;
        $this->currentSubmenu = $id2;
        $fileName = is_null($id2) ? 'detail.latte' : "{$id2}.latte";

        if (!$this->_setTempalte($fileName))
        {
            $fileName = 'detail.latte';
            $this->_setTempalte($fileName);
        }

        $this->template->formName = "{$id2}Form";
    }

    private function _setTempalte($fileName)
    {
        $setted = false;
        $formatFiles = $this->formatFiles($fileName);

        foreach ($formatFiles as $formatFile) {
            if (is_file($formatFile)) {
                $this->template->setFile($formatFile);
                $setted = true;
                break;
            }
        }

        return $setted;
    }

    public function formatFiles($fileName)
    {
        $files = [];
        $className = $this->getClassName($this);

        $files[] = $this->_webDir->getPath("app/presenters/backend/templates/{$className}/{$fileName}");
        $files[] = $this->_webDir->getPath(self::CMS_PATH."backend/templates/{$className}/{$fileName}");
        $files[] = $this->_webDir->getPath(self::CMS_PATH."backend/templates/_default/{$fileName}");

        return $files;
    }

    public function createComponent($name)
    {
        $groupForm = null;

        if (Nette\Utils\Strings::endsWith($name,self::CMS_COMPONENT_FORM_SUFFIX)) {
            $groupName = Nette\Utils\Strings::substring($name, 0, strlen($name) - strlen(self::CMS_COMPONENT_FORM_SUFFIX));
            $groupForm = $this->createGroupForm($groupName);
        }

        if (is_null($groupForm)) {
            // TODO: Change the autogenerated stub
            return parent::createComponent($name);
        } else {
            return $groupForm;
        }
    }

    protected function createGroupForm($groupName)
    {
        $form = $this->formFactory->create([1,3]);

        if (is_null($this->model))
        {
            throw new \Exception('Please set this model for generate form '.$groupName);
        }

        $cols = $this->model->GetGroupCols($groupName);

        //Debugger::barDump($cols, 'group cols');

        foreach ($cols as $col) {
            switch ($col->type)
            {
                case TableColumn::COL_TYPE_STRING:

                    if (200 < $col->length)
                    {
                        $form->addTextArea($col->name, $col->title)
                            ->setMaxLength($col->length);
                    } else {
                        $form->addText( $col->name, $col->title)
                            ->setMaxLength($col->length);
                    }

                    break;

                case TableColumn::COL_TYPE_TEXT:
                    $form->addTextArea($col->name, $col->title)
                        ->setMaxLength(10000);
                    break;

                case TableColumn::COL_TYPE_INTEGER:

                    if ($col->reference) {
                        $form->addSelect($col->name, $col->title, $col->GetReferenceValueList($this->getLangId()))->setPrompt("Please choose value");
                        //Debugger::barDump($col, 'reference column');
                        //Debugger::barDump($col->GetReferenceValueList($this->getLangId()), "reference values");
                    } else {
                        $form->addInteger($col->name, $col->title);
                    }

                    break;
            }
        }

        $form->addHidden('group', 'yy');
        $form->addSubmit("save", "btn.save");
        $defaults = $this->getDefaults($groupName);
        $form->setDefaults($defaults);
        Debugger::barDump($defaults, 'defaults');

        $form->onSuccess[] = [$this, 'saveGroupForm'];

        return $form;
    }

    public function saveGroupForm(Application\UI\Form $form, $values)
    {
        Debugger::barDump($form, 'form');
        Debugger::barDump($values, 'values');
    }

    public function getDefaults($groupName)
    {
        return ['group' => $groupName] + $this->model->GetDefaultsForGroup($groupName, $this->currentId, $this->getLangId());
    }

    public function createComponentList()
    {
        if (!is_null($this->model)) {

            $list = new \BackendListPageControl();
            $list->heads = $this->model->getListHeaders(); //array_merge(['id' => "ID"], $this->model->getListHeaders());
            $list->list = $this->model->getListValues($list->heads, $this->getLangId());

            return $list;
        } else {

            $list = new \EmptyComponent();

            return $list;

        }

        return null;
    }

    public function beforeRender()
    {
        parent::beforeRender();

        $this->template->setTranslator($this->_translator);
        $this->template->languages = $this->_language->getAll();
        $this->template->lang = $this->lang;
        $this->submenu = $this->getSubmenu();
        $this->template->currentSubmenu = $this->currentSubmenu;

        if (!empty($this->submenu))
        {
            $this->template->submenu = $this->submenu;
        }

        if (!$this->isAllowed()) {
            $this->redirect('Sign:in');
        }
    }


    protected function getSubmenu()
    {
        return [];
    }

    public function formatTemplateFiles()
    {
        $s = DIRECTORY_SEPARATOR;
        list(, $presenter) = \Nette\Application\Helpers::splitName($this->getName());

        $templates = [];
        $templates[] = $this->_webDir->getPath("app{$s}presenters{$s}backend{$s}templates{$s}{$presenter}{$s}{$this->view}.latte");
        $templates[] = $this->_webDir->getPath("vendor{$s}lefnerz{$s}cms{$s}src{$s}cms{$s}backend{$s}templates{$s}{$presenter}{$s}{$this->view}.latte");
        $templates[] = $this->_webDir->getPath("vendor{$s}lefnerz{$s}cms{$s}src{$s}cms{$s}backend{$s}templates{$s}_default{$s}{$this->view}.latte");

        return $templates;
    }

    public function formatLayoutTemplateFiles()
    {
        $s = DIRECTORY_SEPARATOR;

        $layout = [];
        $layout[] = $this->_webDir->getPath("app{$s}presenters{$s}backend{$s}templates{$s}@layout.latte");
        $layout[] = $this->_webDir->getPath("vendor{$s}lefnerz{$s}cms{$s}src{$s}cms{$s}backend{$s}templates{$s}@layout.latte");

        return $layout;
    }

    protected function getClassName(object $object)
    {
        $class = get_class($object);
        if ($pos = strrpos($class, '\\')) return substr($class, $pos + 1);
        return $pos;
    }

    public function getLangId()
    {
        return $this->_language->GetLangIdByCode($this->lang);
    }

    public function isAllowed()
    {
        return true;
    }
}